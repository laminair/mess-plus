run_name: "baseline"
benchmark: "arc_challenge"

# You need to provide models in ascending order by parameter count for MESS+ to work correctly.
model_zoo:
  meta-llama/Llama-3.2-1B-Instruct:
    category: "xsmall"
    gpu_indices: [0]
    max_seq_len: 2048
    gpu_memory_utilization: 0.3
    quantization: null
  meta-llama/Llama-3.2-3B:
    category: "small"
    gpu_indices: [0]
    max_seq_len: 2048
    gpu_memory_utilization: 0.45
    quantization: null

classifier_model:
  model_id: "answerdotai/ModernBERT-base"
  epochs: 1
  learning_rate: 0.0606 # Use HP sweep to find config with lowest val loss.
  weight_decay: 0.01
  momentum: 0.9
  batch_size: 32
  max_length: 256
  warmup_ratio: 0.1
  threshold: 0.5
  dropout_rate: 0.1
  freeze_bert_layers: true
  memory_size: 0
  memory_strategy: random # This only works when memory_size > 0
  reset_optimizer: false
  regularization_lambda: 0.0
  gpu_index: 0
  disable_tqdm: true
  # Path uses the "classifier" folder as root. Alternatively you can specify an absolute path.
  checkpoint_path: "checkpoints/arc_challenge"
  use_pretrained_classifier: false
  scoring_method: raw
  validation_dataset_size: 0.1

# The "empirical" config will take effect when running the "main.py" script and doing actual inference on the LLM zoo.
empirical:
  seed: 43 # Can also be a list, if you want to capture multiple runs.
  alpha: 0.75
  c: 1
  V: 0.01
  # Use the option below to capture the performance of all models in the zoo and use them with the simulator.
  write_benchmark_data_to_disk: true

# The "simulated" config will take effect when running the "simulator.py" script and using previously generated results.
simulated:
  seeds: [42, 43, 44]
  alpha_values: [0.4, 0.5, 0.6]
  c_values: [0.01, 0.1, 1.0]
  v_values: [0.0001, 0.001, 0.01]

lm_eval:
  # The run name will be the first benchmark in the list below.
  benchmarks: ["arc_challenge"]
  num_repeats: 1
  limit_num_samples: 10
  enforce_eager: true
  write_to_disk: false
